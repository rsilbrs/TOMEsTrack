{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst METRIC_CONFIGS = {\n  plateletVolume: {\n    label: \"Volume Médio de Plaquetas\",\n    dataKey: \"PlateletVolume\",\n    color: \"warning\",\n    unit: \"mL\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  plasmaVolume: {\n    label: \"Volume Médio de Plasma\",\n    dataKey: \"PlasmaVolume\",\n    color: \"success\",\n    unit: \"mL\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  leukocyteVolume: {\n    label: \"Volume de Leucócitos\",\n    dataKey: \"LeucocyteVolume\",\n    color: \"secondary\",\n    unit: \"mL\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  plateletIndex: {\n    label: \"Índice Plaquetário\",\n    dataKey: \"PlateletIndex\",\n    color: \"warning\",\n    unit: \"\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  totalPlasmaVolume: {\n    label: \"Volume Total de Plasma\",\n    dataKey: \"TotalPlasmaVolume\",\n    color: \"success\",\n    unit: \"mL\",\n    endpoint: \"reveosTotalPlasmaVolume\"\n  }\n};\nconst useReveosMetric = metricType => {\n  _s();\n  var _METRIC_CONFIGS$metri, _METRIC_CONFIGS$metri2;\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: ((_METRIC_CONFIGS$metri = METRIC_CONFIGS[metricType]) === null || _METRIC_CONFIGS$metri === void 0 ? void 0 : _METRIC_CONFIGS$metri.label) || \"Métrica\",\n      color: ((_METRIC_CONFIGS$metri2 = METRIC_CONFIGS[metricType]) === null || _METRIC_CONFIGS$metri2 === void 0 ? void 0 : _METRIC_CONFIGS$metri2.color) || \"info\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const apiUrl = process.env.REACT_APP_API_URL;\n        const config = METRIC_CONFIGS[metricType];\n        if (!token) {\n          throw new Error(\"Nenhum token de autenticação encontrado\");\n        }\n        if (!config) {\n          throw new Error(`Tipo de métrica inválido: ${metricType}`);\n        }\n        const endpoint = config.endpoint || \"reveosComponentsVolume\";\n        const response = await fetch(`${apiUrl}/api/${endpoint}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            localStorage.removeItem(\"authToken\");\n            window.location.href = \"/authentication/sign-in\";\n            return;\n          }\n          throw new Error(`Erro HTTP: ${response.status}`);\n        }\n        const data = await response.json();\n        const dadosOrdenados = data.sort((a, b) => {\n          if (a.Ano !== b.Ano) return a.Ano - b.Ano;\n          return a.Mes - b.Mes;\n        });\n        setChartData({\n          labels: dadosOrdenados.map(item => `${item.Mes}/${item.Ano}`),\n          datasets: [{\n            label: `${config.label} (${config.unit})`.trim(),\n            color: config.color,\n            data: dadosOrdenados.map(item => item[config.dataKey])\n          }]\n        });\n      } catch (error) {\n        var _METRIC_CONFIGS$metri3, _METRIC_CONFIGS$metri4;\n        console.error(\"Erro ao buscar dados:\", error);\n        setChartData({\n          labels: [\"Sem dados\"],\n          datasets: [{\n            label: ((_METRIC_CONFIGS$metri3 = METRIC_CONFIGS[metricType]) === null || _METRIC_CONFIGS$metri3 === void 0 ? void 0 : _METRIC_CONFIGS$metri3.label) || \"Métrica\",\n            color: ((_METRIC_CONFIGS$metri4 = METRIC_CONFIGS[metricType]) === null || _METRIC_CONFIGS$metri4 === void 0 ? void 0 : _METRIC_CONFIGS$metri4.color) || \"info\",\n            data: [0]\n          }]\n        });\n      }\n    };\n    fetchData();\n  }, [metricType]);\n  return chartData;\n};\n_s(useReveosMetric, \"kwz6SRNtPBTWAcj62ejxp8lidAg=\");\nexport default useReveosMetric;","map":{"version":3,"names":["useState","useEffect","METRIC_CONFIGS","plateletVolume","label","dataKey","color","unit","endpoint","plasmaVolume","leukocyteVolume","plateletIndex","totalPlasmaVolume","useReveosMetric","metricType","_s","_METRIC_CONFIGS$metri","_METRIC_CONFIGS$metri2","chartData","setChartData","labels","datasets","data","fetchData","token","localStorage","getItem","apiUrl","process","env","REACT_APP_API_URL","config","Error","response","fetch","method","headers","Authorization","ok","status","removeItem","window","location","href","json","dadosOrdenados","sort","a","b","Ano","Mes","map","item","trim","error","_METRIC_CONFIGS$metri3","_METRIC_CONFIGS$metri4","console"],"sources":["/Users/ricardosilva/Desktop/Projeto/Dashboard/src/layouts/reveos/components/data/useReveosMetric.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst METRIC_CONFIGS = {\n  plateletVolume: {\n    label: \"Volume Médio de Plaquetas\",\n    dataKey: \"PlateletVolume\",\n    color: \"warning\",\n    unit: \"mL\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  plasmaVolume: {\n    label: \"Volume Médio de Plasma\",\n    dataKey: \"PlasmaVolume\",\n    color: \"success\",\n    unit: \"mL\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  leukocyteVolume: {\n    label: \"Volume de Leucócitos\",\n    dataKey: \"LeucocyteVolume\",\n    color: \"secondary\",\n    unit: \"mL\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  plateletIndex: {\n    label: \"Índice Plaquetário\",\n    dataKey: \"PlateletIndex\",\n    color: \"warning\",\n    unit: \"\",\n    endpoint: \"reveosComponentsVolume\"\n  },\n  totalPlasmaVolume: {\n    label: \"Volume Total de Plasma\",\n    dataKey: \"TotalPlasmaVolume\",\n    color: \"success\",\n    unit: \"mL\",\n    endpoint: \"reveosTotalPlasmaVolume\"\n  }\n};\n\nconst useReveosMetric = (metricType) => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: METRIC_CONFIGS[metricType]?.label || \"Métrica\",\n        color: METRIC_CONFIGS[metricType]?.color || \"info\",\n        data: [],\n      },\n    ],\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        const apiUrl = process.env.REACT_APP_API_URL;\n        const config = METRIC_CONFIGS[metricType];\n\n        if (!token) {\n          throw new Error(\"Nenhum token de autenticação encontrado\");\n        }\n\n        if (!config) {\n          throw new Error(`Tipo de métrica inválido: ${metricType}`);\n        }\n\n        const endpoint = config.endpoint || \"reveosComponentsVolume\";\n\n        const response = await fetch(`${apiUrl}/api/${endpoint}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            localStorage.removeItem(\"authToken\");\n            window.location.href = \"/authentication/sign-in\";\n            return;\n          }\n          throw new Error(`Erro HTTP: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        const dadosOrdenados = data.sort((a, b) => {\n          if (a.Ano !== b.Ano) return a.Ano - b.Ano;\n          return a.Mes - b.Mes;\n        });\n\n        setChartData({\n          labels: dadosOrdenados.map((item) => `${item.Mes}/${item.Ano}`),\n          datasets: [\n            {\n              label: `${config.label} (${config.unit})`.trim(),\n              color: config.color,\n              data: dadosOrdenados.map((item) => item[config.dataKey]),\n            },\n          ],\n        });\n      } catch (error) {\n        console.error(\"Erro ao buscar dados:\", error);\n        setChartData({\n          labels: [\"Sem dados\"],\n          datasets: [\n            {\n              label: METRIC_CONFIGS[metricType]?.label || \"Métrica\",\n              color: METRIC_CONFIGS[metricType]?.color || \"info\",\n              data: [0],\n            },\n          ],\n        });\n      }\n    };\n\n    fetchData();\n  }, [metricType]);\n\n  return chartData;\n};\n\nexport default useReveosMetric;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}