{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useLineChartData = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: \"Plaquetas Oferecidas\",\n      color: \"warning\",\n      data: []\n    }, {\n      label: \"Plaquetas Coletadas\",\n      color: \"warning\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        if (!token) {\n          throw new Error(\"Nenhum token de autenticação encontrado\");\n        }\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/api/apheresisComponents`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            localStorage.removeItem(\"authToken\"); // Remove token inválido\n            window.location.href = \"/authentication/sign-in\"; // Redireciona para login\n            return;\n          }\n          throw new Error(`Erro HTTP: ${response.status}`);\n        }\n        if (!response.ok) throw new Error(`Erro HTTP: ${response.status}`);\n        const dados = await response.json();\n\n        // Ordenar dados por ano e mês\n        const dadosOrdenados = dados.sort((a, b) => {\n          if (a.Ano !== b.Ano) return a.Ano - b.Ano;\n          return a.Mes - b.Mes;\n        });\n\n        // Criar datasets apenas para componentes com valores\n        const datasets = [];\n\n        // Plaquetas Oferecidas\n        const Offered = dadosOrdenados.map(item => item.TotalOffered || 0);\n        if (Offered.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas Oferecidas\",\n            color: \"warning\",\n            data: Offered\n          });\n        }\n\n        // Plaquetas Coletadas\n        const Collected = dadosOrdenados.map(item => item.TotalCollected || 0);\n        if (Collected.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas Coletadas\",\n            color: \"warning\",\n            data: Collected,\n            borderDash: [5, 5] // Linha tracejada para diferenciar\n          });\n        }\n        setChartData({\n          labels: dadosOrdenados.map(item => `${item.Mes}/${item.Ano}`),\n          datasets: datasets\n        });\n      } catch (error) {\n        console.error(\"Erro ao buscar dados:\", error);\n        // Dados de fallback em caso de erro\n        setChartData({\n          labels: [\"Sem dados\"],\n          datasets: [{\n            label: \"Plaquetas Oferecidas\",\n            color: \"warning\",\n            data: [0]\n          }, {\n            label: \"Plaquetas Coletadas\",\n            color: \"warning\",\n            data: [0]\n          }]\n        });\n      }\n    };\n    fetchData();\n  }, []);\n  return chartData;\n};\n_s(useLineChartData, \"Fe2PDSbTvczSy8c0PvL8Z9wh2b0=\");\nexport default useLineChartData;","map":{"version":3,"names":["useState","useEffect","useLineChartData","_s","chartData","setChartData","labels","datasets","label","color","data","fetchData","token","localStorage","getItem","Error","response","fetch","process","env","REACT_APP_API_URL","method","headers","Authorization","ok","status","removeItem","window","location","href","dados","json","dadosOrdenados","sort","a","b","Ano","Mes","Offered","map","item","TotalOffered","some","valor","push","Collected","TotalCollected","borderDash","error","console"],"sources":["/Users/ricardosilva/Desktop/Projeto/Dashboard/src/layouts/trima/components/data/offered_collected.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useLineChartData = () => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: \"Plaquetas Oferecidas\",\n        color: \"warning\",\n        data: [],\n      },\n      {\n        label: \"Plaquetas Coletadas\",\n        color: \"warning\",\n        data: [],\n      },\n    ],\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        if (!token) {\n          throw new Error(\"Nenhum token de autenticação encontrado\");\n        }\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/api/apheresisComponents`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) {\n          if (response.status === 401 || response.status === 403) {\n            localStorage.removeItem(\"authToken\"); // Remove token inválido\n            window.location.href = \"/authentication/sign-in\"; // Redireciona para login\n            return;\n          }\n          throw new Error(`Erro HTTP: ${response.status}`);\n        }\n\n        if (!response.ok) throw new Error(`Erro HTTP: ${response.status}`);\n\n        const dados = await response.json();\n\n        // Ordenar dados por ano e mês\n        const dadosOrdenados = dados.sort((a, b) => {\n          if (a.Ano !== b.Ano) return a.Ano - b.Ano;\n          return a.Mes - b.Mes;\n        });\n\n        // Criar datasets apenas para componentes com valores\n        const datasets = [];\n\n        // Plaquetas Oferecidas\n        const Offered = dadosOrdenados.map((item) => item.TotalOffered || 0);\n        if (Offered.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas Oferecidas\",\n            color: \"warning\",\n            data: Offered,\n          });\n        }\n\n        // Plaquetas Coletadas\n        const Collected = dadosOrdenados.map((item) => item.TotalCollected || 0);\n        if (Collected.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas Coletadas\",\n            color: \"warning\",\n            data: Collected,\n            borderDash: [5, 5], // Linha tracejada para diferenciar\n          });\n        }\n\n        setChartData({\n          labels: dadosOrdenados.map((item) => `${item.Mes}/${item.Ano}`),\n          datasets: datasets,\n        });\n      } catch (error) {\n        console.error(\"Erro ao buscar dados:\", error);\n        // Dados de fallback em caso de erro\n        setChartData({\n          labels: [\"Sem dados\"],\n          datasets: [\n            {\n              label: \"Plaquetas Oferecidas\",\n              color: \"warning\",\n              data: [0],\n            },\n            {\n              label: \"Plaquetas Coletadas\",\n              color: \"warning\",\n              data: [0],\n            },\n          ],\n        });\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return chartData;\n};\n\nexport default useLineChartData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}