{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useLineChartData = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: \"Plaquetas\",\n      color: \"warning\",\n      data: []\n    }, {\n      label: \"Hemácias\",\n      color: \"error\",\n      data: []\n    }, {\n      label: \"Plasma\",\n      color: \"secondary\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        if (!token) {\n          throw new Error(\"Nenhum token de autenticação encontrado\");\n        }\n        const response = await fetch(`${process.env.API_URL}/api/componentesTipo`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error(`Erro HTTP: ${response.status}`);\n        const dados = await response.json();\n\n        // Ordenar dados por ano e mês\n        const dadosOrdenados = dados.sort((a, b) => {\n          if (a.Ano !== b.Ano) return a.Ano - b.Ano;\n          return a.Mes - b.Mes;\n        });\n\n        // Criar datasets apenas para componentes com valores\n        const datasets = [];\n\n        // Plaquetas Aférese\n        const plaquetasAferese = dadosOrdenados.map(item => item.TotalPlaquetasAferese || 0);\n        if (plaquetasAferese.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas Aférese\",\n            color: \"warning\",\n            data: plaquetasAferese\n          });\n        }\n\n        // Plaquetas ST\n        const plaquetasST = dadosOrdenados.map(item => item.TotalPlaquetasST || 0);\n        if (plaquetasST.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas ST\",\n            color: \"warning\",\n            data: plaquetasST,\n            borderDash: [5, 5] // Linha tracejada para diferenciar\n          });\n        }\n\n        // Hemácias Aférese\n        const hemaciasAferese = dadosOrdenados.map(item => item.TotalHemaciasAferese || 0);\n        if (hemaciasAferese.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Hemácias Aférese\",\n            color: \"error\",\n            data: hemaciasAferese\n          });\n        }\n\n        // Hemácias ST\n        const hemaciasST = dadosOrdenados.map(item => item.TotalHemaciasST || 0);\n        if (hemaciasST.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Hemácias ST\",\n            color: \"error\",\n            data: hemaciasST,\n            borderDash: [5, 5]\n          });\n        }\n\n        // Plasma Aférese\n        const plasmaAferese = dadosOrdenados.map(item => item.TotalPlasmaAferese || 0);\n        if (plasmaAferese.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Plasma Aférese\",\n            color: \"success\",\n            data: plasmaAferese\n          });\n        }\n\n        // Plasma ST\n        const plasmaST = dadosOrdenados.map(item => item.TotalPlasmaST || 0);\n        if (plasmaST.some(valor => valor > 0)) {\n          datasets.push({\n            label: \"Plasma ST\",\n            color: \"success\",\n            data: plasmaST,\n            borderDash: [5, 5]\n          });\n        }\n        setChartData({\n          labels: dadosOrdenados.map(item => `${item.Mes}/${item.Ano}`),\n          datasets: datasets\n        });\n      } catch (error) {\n        console.error(\"Erro ao buscar dados:\", error);\n        // Dados de fallback em caso de erro\n        setChartData({\n          labels: [\"Sem dados\"],\n          datasets: [{\n            label: \"Plaquetas\",\n            color: \"warning\",\n            data: [0]\n          }, {\n            label: \"Hemácias\",\n            color: \"error\",\n            data: [0]\n          }, {\n            label: \"Plasma\",\n            color: \"secondary\",\n            data: [0]\n          }]\n        });\n      }\n    };\n    fetchData();\n  }, []);\n  return chartData;\n};\n_s(useLineChartData, \"vAhQeMbMFHrKeZjerZhpRXKgNUY=\");\nexport default useLineChartData;","map":{"version":3,"names":["useState","useEffect","useLineChartData","_s","chartData","setChartData","labels","datasets","label","color","data","fetchData","token","localStorage","getItem","Error","response","fetch","process","env","API_URL","method","headers","Authorization","ok","status","dados","json","dadosOrdenados","sort","a","b","Ano","Mes","plaquetasAferese","map","item","TotalPlaquetasAferese","some","valor","push","plaquetasST","TotalPlaquetasST","borderDash","hemaciasAferese","TotalHemaciasAferese","hemaciasST","TotalHemaciasST","plasmaAferese","TotalPlasmaAferese","plasmaST","TotalPlasmaST","error","console"],"sources":["/Users/ricardosilva/Desktop/Projeto/Dashboard/src/layouts/dashboard/data/componentesTipo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useLineChartData = () => {\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: \"Plaquetas\",\n        color: \"warning\",\n        data: [],\n      },\n      {\n        label: \"Hemácias\",\n        color: \"error\",\n        data: [],\n      },\n      {\n        label: \"Plasma\",\n        color: \"secondary\",\n        data: [],\n      },\n    ],\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"authToken\");\n        if (!token) {\n          throw new Error(\"Nenhum token de autenticação encontrado\");\n        }\n\n        const response = await fetch(`${process.env.API_URL}/api/componentesTipo`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        if (!response.ok) throw new Error(`Erro HTTP: ${response.status}`);\n\n        const dados = await response.json();\n\n        // Ordenar dados por ano e mês\n        const dadosOrdenados = dados.sort((a, b) => {\n          if (a.Ano !== b.Ano) return a.Ano - b.Ano;\n          return a.Mes - b.Mes;\n        });\n\n        // Criar datasets apenas para componentes com valores\n        const datasets = [];\n\n        // Plaquetas Aférese\n        const plaquetasAferese = dadosOrdenados.map((item) => item.TotalPlaquetasAferese || 0);\n        if (plaquetasAferese.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas Aférese\",\n            color: \"warning\",\n            data: plaquetasAferese,\n          });\n        }\n\n        // Plaquetas ST\n        const plaquetasST = dadosOrdenados.map((item) => item.TotalPlaquetasST || 0);\n        if (plaquetasST.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Plaquetas ST\",\n            color: \"warning\",\n            data: plaquetasST,\n            borderDash: [5, 5], // Linha tracejada para diferenciar\n          });\n        }\n\n        // Hemácias Aférese\n        const hemaciasAferese = dadosOrdenados.map((item) => item.TotalHemaciasAferese || 0);\n        if (hemaciasAferese.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Hemácias Aférese\",\n            color: \"error\",\n            data: hemaciasAferese,\n          });\n        }\n\n        // Hemácias ST\n        const hemaciasST = dadosOrdenados.map((item) => item.TotalHemaciasST || 0);\n        if (hemaciasST.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Hemácias ST\",\n            color: \"error\",\n            data: hemaciasST,\n            borderDash: [5, 5],\n          });\n        }\n\n        // Plasma Aférese\n        const plasmaAferese = dadosOrdenados.map((item) => item.TotalPlasmaAferese || 0);\n        if (plasmaAferese.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Plasma Aférese\",\n            color: \"success\",\n            data: plasmaAferese,\n          });\n        }\n\n        // Plasma ST\n        const plasmaST = dadosOrdenados.map((item) => item.TotalPlasmaST || 0);\n        if (plasmaST.some((valor) => valor > 0)) {\n          datasets.push({\n            label: \"Plasma ST\",\n            color: \"success\",\n            data: plasmaST,\n            borderDash: [5, 5],\n          });\n        }\n\n        setChartData({\n          labels: dadosOrdenados.map((item) => `${item.Mes}/${item.Ano}`),\n          datasets: datasets,\n        });\n      } catch (error) {\n        console.error(\"Erro ao buscar dados:\", error);\n        // Dados de fallback em caso de erro\n        setChartData({\n          labels: [\"Sem dados\"],\n          datasets: [\n            {\n              label: \"Plaquetas\",\n              color: \"warning\",\n              data: [0],\n            },\n            {\n              label: \"Hemácias\",\n              color: \"error\",\n              data: [0],\n            },\n            {\n              label: \"Plasma\",\n              color: \"secondary\",\n              data: [0],\n            },\n          ],\n        });\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return chartData;\n};\n\nexport default useLineChartData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}